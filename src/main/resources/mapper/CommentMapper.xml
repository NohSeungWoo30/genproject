<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="generationgap.co.kr.mapper.board.CommentMapper">
    <resultMap id="commentMap" type="generationgap.co.kr.domain.board.Comment">
        <id property="commentIdx" column="comment_idx"/>
        <result property="postIdx" column="post_idx"/>
        <result property="commenterIdx" column="commenter_idx"/>
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updateAt" column="update_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="authorNickname" column="author_nickname"/>
    </resultMap>

    <select id="getCommentsByPost" resultMap="commentMap">
        SELECT pc.*, u.nickname AS author_nickname
        FROM post_comments pc
        JOIN users u ON pc.commenter_idx = u.user_idx
        WHERE pc.post_idx = #{postIdx} &#45;&#45; 완전 화면에서 제거하지 않고 삭제된 댓글입니다라는 형태로 표기하기위해 일단 주석 처리 AND pc.is_deleted='N'
        ORDER BY
            NVL(pc.parent_comment_id, pc.comment_idx), &#45;&#45;부모 댓글 먼저
            pc.created_at ASC
    </select>



    <!-- 단일 댓글 조회용 메서드 추가 -->
    <select id="getCommentById" resultMap="commentMap" parameterType="int">
        SELECT
        pc.*,
        u.nickname AS author_nickname
        FROM post_comments pc
        JOIN users u ON pc.commenter_idx = u.user_idx
        WHERE pc.comment_idx = #{commentIdx}
    </select>

    <insert id="insertComment" parameterType="generationgap.co.kr.domain.board.Comment">
        INSERT INTO post_comments (
        post_idx,
        commenter_idx,
        parent_comment_id,
        content,
        is_deleted,
        created_at
        ) VALUES (
        #{postIdx},
        #{commenterIdx},
        #{parentCommentId, jdbcType=NUMERIC},
        #{content},
        'N',
        SYSTIMESTAMP
        )
    </insert>

    <update id="softDeleteComment">
        UPDATE post_comments
        SET is_deleted = 'Y',
        deleted_by = #{userIdx},
        deleted_at = SYSDATE
        WHERE comment_idx = #{commentIdx}
    </update>

    <update id="updateCommentContent">
        UPDATE post_comments
        SET content = #{content},
        update_at = SYSTIMESTAMP
        WHERE comment_idx = #{commentIdx}
    </update>

    <insert id="insertCommentEdit">
        INSERT INTO comment_edits (
        comment_idx,
        content_before,
        edited_by
        ) VALUES (
        #{commentIdx},
        #{contentBefore},
        #{editedBy}
        )
    </insert>


</mapper>
